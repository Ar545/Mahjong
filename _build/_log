### Starting build.
# Target: test.ml.depends, tags: { package(ounit2), debug, extension:ml, file:test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules test.ml > test.ml.depends
# Target: command.mli.depends, tags: { package(ounit2), debug, extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules command.mli > command.mli.depends # cached
# Target: gameState.mli.depends, tags: { package(ounit2), debug, extension:mli, file:gameState.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules gameState.mli > gameState.mli.depends # cached
# Target: roundState.mli.depends, tags: { package(ounit2), debug, extension:mli, file:roundState.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules roundState.mli > roundState.mli.depends # cached
# Target: players.mli.depends, tags: { package(ounit2), debug, extension:mli, file:players.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules players.mli > players.mli.depends # cached
# Target: players.cmi, tags: { package(ounit2), byte, compile, debug, extension:mli, file:players.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o players.cmi players.mli
# Target: roundState.cmi, tags: { package(ounit2), byte, compile, debug, extension:mli, file:roundState.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o roundState.cmi roundState.mli
# Target: tiles.mli.depends, tags: { package(ounit2), debug, extension:mli, file:tiles.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules tiles.mli > tiles.mli.depends # cached
# Target: tutorial.mli.depends, tags: { package(ounit2), debug, extension:mli, file:tutorial.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules tutorial.mli > tutorial.mli.depends # cached
# Target: command.cmi, tags: { package(ounit2), byte, compile, debug, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o command.cmi command.mli
# Target: gameState.cmi, tags: { package(ounit2), byte, compile, debug, extension:mli, file:gameState.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o gameState.cmi gameState.mli
# Target: tiles.cmi, tags: { package(ounit2), byte, compile, debug, extension:mli, file:tiles.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o tiles.cmi tiles.mli
# Target: tutorial.cmi, tags: { package(ounit2), byte, compile, debug, extension:mli, file:tutorial.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o tutorial.cmi tutorial.mli
# Target: test.cmo, tags: { package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o test.cmo test.ml
# Target: command.ml.depends, tags: { package(ounit2), debug, extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules command.ml > command.ml.depends # cached
# Target: gameState.ml.depends, tags: { package(ounit2), debug, extension:ml, file:gameState.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules gameState.ml > gameState.ml.depends # cached
# Target: players.ml.depends, tags: { package(ounit2), debug, extension:ml, file:players.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules players.ml > players.ml.depends # cached
# Target: roundState.ml.depends, tags: { package(ounit2), debug, extension:ml, file:roundState.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules roundState.ml > roundState.ml.depends # cached
# Target: tiles.ml.depends, tags: { package(ounit2), debug, extension:ml, file:tiles.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules tiles.ml > tiles.ml.depends # cached
# Target: tutorial.ml.depends, tags: { package(ounit2), debug, extension:ml, file:tutorial.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules tutorial.ml > tutorial.ml.depends
# Target: command.cmo, tags: { package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o command.cmo command.ml
# Target: gameState.cmo, tags: { package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:gameState.cmo, file:gameState.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o gameState.cmo gameState.ml
# Target: players.cmo, tags: { package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:players.cmo, file:players.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o players.cmo players.ml
# Target: roundState.cmo, tags: { package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:roundState.cmo, file:roundState.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o roundState.cmo roundState.ml
# Target: tiles.cmo, tags: { package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:tiles.cmo, file:tiles.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o tiles.cmo tiles.ml
# Target: tutorial.cmo, tags: { package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:tutorial.cmo, file:tutorial.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -o tutorial.cmo tutorial.ml
# Target: test.byte, tags: { package(ounit2), byte, debug, dont_link_with, extension:byte, file:test.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -g -package ounit2 command.cmo players.cmo tiles.cmo roundState.cmo gameState.cmo tutorial.cmo test.cmo -o test.byte
# Compilation successful.
