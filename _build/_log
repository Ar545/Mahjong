### Starting build.
# Target: command.mli.depends, tags: { package(ounit2), extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules command.mli > command.mli.depends
# Target: command.cmi, tags: { package(ounit2), byte, compile, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o command.cmi command.mli
# Target: command.ml.depends, tags: { package(ounit2), extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules command.ml > command.ml.depends
# Target: command.cmo, tags: { package(ounit2), byte, compile, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o command.cmo command.ml
# Target: roundState.mli.depends, tags: { package(ounit2), extension:mli, file:roundState.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules roundState.mli > roundState.mli.depends # cached
# Target: roundState.cmi, tags: { package(ounit2), byte, compile, extension:mli, file:roundState.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o roundState.cmi roundState.mli # cached
# Target: roundState.ml.depends, tags: { package(ounit2), extension:ml, file:roundState.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules roundState.ml > roundState.ml.depends
+ ocamlfind ocamldep -package ounit2 -modules roundState.ml > roundState.ml.depends
File "roundState.ml", line 3, characters 19-20:
3 | type order = [Npc.t]
                       ^
Error: Syntax error
Command exited with code 2.
# Compilation unsuccessful.
