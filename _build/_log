### Starting build.
# Target: command.mli.depends, tags: { package(ounit2), extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules command.mli > command.mli.depends
# Target: command.cmi, tags: { package(ounit2), byte, compile, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o command.cmi command.mli
# Target: command.ml.depends, tags: { package(ounit2), extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules command.ml > command.ml.depends
# Target: command.cmo, tags: { package(ounit2), byte, compile, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o command.cmo command.ml
# Target: roundState.mli.depends, tags: { package(ounit2), extension:mli, file:roundState.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules roundState.mli > roundState.mli.depends
# Target: roundState.cmi, tags: { package(ounit2), byte, compile, extension:mli, file:roundState.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o roundState.cmi roundState.mli
# Target: roundState.ml.depends, tags: { package(ounit2), extension:ml, file:roundState.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules roundState.ml > roundState.ml.depends
# Target: players.mli.depends, tags: { package(ounit2), extension:mli, file:players.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules players.mli > players.mli.depends
# Target: tiles.mli.depends, tags: { package(ounit2), extension:mli, file:tiles.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -modules tiles.mli > tiles.mli.depends
# Target: players.cmi, tags: { package(ounit2), byte, compile, extension:mli, file:players.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o players.cmi players.mli
# Target: tiles.cmi, tags: { package(ounit2), byte, compile, extension:mli, file:tiles.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o tiles.cmi tiles.mli
# Target: roundState.cmo, tags: { package(ounit2), byte, compile, extension:cmo, extension:ml, file:roundState.cmo, file:roundState.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -o roundState.cmo roundState.ml
+ ocamlfind ocamlc -c -package ounit2 -o roundState.cmo roundState.ml
File "roundState.ml", line 1:
Error: The implementation roundState.ml
       does not match the interface roundState.cmi:
       Values do not match:
         val init_round : Players.player -> Players.player list -> t
       is not included in
         val init_round : unit -> t
       File "roundState.mli", line 13, characters 0-26: Expected declaration
       File "roundState.ml", line 13, characters 4-14: Actual declaration
Command exited with code 2.
# Compilation unsuccessful.
